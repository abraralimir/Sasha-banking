'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Wand2, Loader2, Download } from 'lucide-react';
import NextImage from 'next/image';

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from '@/components/ui/dialog';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

const formSchema = z.object({
  prompt: z.string().min(3, 'Prompt must be at least 3 characters.'),
});

interface ImageGenerationDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onImageGenerated: (imageUrl: string, prompt: string) => void;
}

export function ImageGenerationDialog({ open, onOpenChange, onImageGenerated }: ImageGenerationDialogProps) {
  const [isLoading, setIsLoading] = useState(false);
  const [generatedImage, setGeneratedImage] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      prompt: '',
    },
  });

  const onSubmit = (values: z.infer<typeof formSchema>) => {
    setIsLoading(true);
    // Using Pollinations.ai with a random seed for variety
    const imageUrl = `https://pollinations.ai/p/${encodeURIComponent(
      values.prompt
    )}?width=1024&height=1024&seed=${Date.now()}&nologo=true`;
    setGeneratedImage(imageUrl);
  };
  
  const handleOpenChange = (isOpen: boolean) => {
    if (!isOpen) {
      form.reset();
      setGeneratedImage(null);
      setIsLoading(false);
    }
    onOpenChange(isOpen);
  };
  
  const handleAddToChat = () => {
    if(generatedImage) {
      onImageGenerated(generatedImage, form.getValues('prompt'));
      handleOpenChange(false);
    }
  }

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-[525px]">
        <DialogHeader>
          <DialogTitle className="flex items-center">
            <Wand2 className="mr-2 h-5 w-5" /> AI Image Generation
          </DialogTitle>
          <DialogDescription>
            Describe the image you want to create. Powered by Pollinations.ai.
          </DialogDescription>
        </DialogHeader>
        <div className="py-4 min-h-[192px]">
          {generatedImage ? (
            <div className="relative aspect-square w-full">
              {isLoading && (
                <div className="absolute inset-0 bg-background/80 flex items-center justify-center rounded-md z-10">
                  <Loader2 className="h-8 w-8 animate-spin text-primary" />
                </div>
              )}
              <NextImage
                src={generatedImage}
                alt={form.getValues('prompt') || 'Generated by AI'}
                fill
                className="rounded-md object-cover"
                onLoad={() => setIsLoading(false)}
                onError={() => {
                  toast({
                    variant: 'destructive',
                    title: 'Image generation failed',
                    description: 'Could not load the image. Please try a different prompt or try again later.',
                  });
                  setIsLoading(false);
                  setGeneratedImage(null);
                }}
                data-ai-hint="generative art"
              />
            </div>
          ) : isLoading ? (
            <div className="flex justify-center items-center h-48 bg-muted rounded-md">
              <div className="flex flex-col items-center space-y-2">
                <Loader2 className="h-8 w-8 animate-spin text-primary" />
                <p className="text-muted-foreground">Generating your masterpiece...</p>
              </div>
            </div>
          ) : (
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="prompt"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Prompt</FormLabel>
                      <FormControl>
                        <Input placeholder="e.g., A cute cat wearing a wizard hat" {...field} />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                <DialogFooter>
                  <Button type="submit">
                    Generate
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          )}
        </div>
        {generatedImage && !isLoading && (
          <DialogFooter>
            <Button variant="outline" onClick={() => { setGeneratedImage(null); form.reset(); }}>
              Generate Another
            </Button>
            <div className="flex-grow" />
            <a href={generatedImage} target="_blank" rel="noopener noreferrer">
              <Button variant="secondary">
                <Download className="mr-2" />
                Download
              </Button>
            </a>
            <Button onClick={handleAddToChat}>Add to Chat</Button>
          </DialogFooter>
        )}
      </DialogContent>
    </Dialog>
  );
}
